import tkinter as tk
from tkinter import *
from datetime import datetime, timedelta
from ctypes import windll

windll.shcore.SetProcessDpiAwareness(1)

#resin timer features
root = tk.Tk()
root.geometry("750x550")
root.title("Resin Timer")

#grid
root.columnconfigure((0,1), weight = 1)
root.rowconfigure((0,1,2,), weight = 1)
root.rowconfigure(3, weight = 8)
root.rowconfigure(4, weight = 1)

#resin left
def calculate_time():
    result_text.config(state="normal")
    try:
        #get the number of current resin by the user
        resin_amount = int(resin_label_box.get())

        #input between 0-160
        if resin_amount <= 159:
            result_text.delete(1.0, tk.END)
            for i in range(20, 161, 20):
                if resin_amount < i:
                    time_per_resin = 8
                    minutes_needed = (i-resin_amount) * time_per_resin
                    duration = timedelta(minutes=minutes_needed)
                    current_time = datetime.now()
                    hours = minutes_needed // 60
                    minutes = minutes_needed % 60
                    new_time = current_time + duration
                    result_text.insert(tk.END, f"{i} resin in {hours}h {minutes:02}min {new_time.strftime('%H:%M')}\n")  
        elif resin_amount == 160:
            result_text.delete(1.0, tk.END)
            result_text.insert(tk.END, f"Your resin is full")
        else:
            result_text.delete(1.0, tk.END)
            result_text.insert(tk.END, f"Number must in between 0 to 160")
    except ValueError:
        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, f"Please fill in ONLY NUMBER!!!", "colour")
        result_text.tag_config("colour", foreground="red")
    finally:
        result_text.config(state="disabled")

#features label
resin_label = Label(root, text="Enter your current Resin :")
resin_label.grid(row=0, column=0, sticky="e", padx=(0,20), pady=(13,10))

resin_label_box = Entry(root)
resin_label_box.grid(row=0, column=1, sticky="w", pady=(13,10))

confirm_button = Button(root, text="Confirm", command=calculate_time, width=15, height=2)
confirm_button.grid(row=1, column=0, columnspan=2, sticky='s')

#result
full_refill = Label(root, text='Results:', font=('Helvetica',20))
full_refill.grid(row=2, column=0, columnspan=2, padx=(0,400), sticky='s')

result_text = tk.Text(root, height=10, width=40)
result_text.grid(row=3, column=0, columnspan=2)
result_text.config(state="disabled")

#clock
#update clock every second
def update_clock():
    current_time = datetime.now().strftime("%d-%m-%Y %I:%M:%S %p")
    clock_label.config(text="Current Time: " + current_time)
    root.after(1000, update_clock)

#clock label
clock_label = Label(root, text='')
clock_label.grid(row=4, column=0, columnspan=1, sticky="sw")

update_clock()
root.mainloop()